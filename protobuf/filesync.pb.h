// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesync.proto

#ifndef PROTOBUF_filesync_2eproto__INCLUDED
#define PROTOBUF_filesync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace filesync {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_filesync_2eproto();
void protobuf_AssignDesc_filesync_2eproto();
void protobuf_ShutdownFile_filesync_2eproto();

class FileInfo;
class Init;
class IsControl;
class SendFile;
class SyncInfo;

// ===================================================================

class SyncInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.SyncInfo) */ {
 public:
  SyncInfo();
  virtual ~SyncInfo();

  SyncInfo(const SyncInfo& from);

  inline SyncInfo& operator=(const SyncInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncInfo& default_instance();

  void Swap(SyncInfo* other);

  // implements Message ----------------------------------------------

  inline SyncInfo* New() const { return New(NULL); }

  SyncInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncInfo& from);
  void MergeFrom(const SyncInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string newFilename = 3;
  bool has_newfilename() const;
  void clear_newfilename();
  static const int kNewFilenameFieldNumber = 3;
  const ::std::string& newfilename() const;
  void set_newfilename(const ::std::string& value);
  void set_newfilename(const char* value);
  void set_newfilename(const char* value, size_t size);
  ::std::string* mutable_newfilename();
  ::std::string* release_newfilename();
  void set_allocated_newfilename(::std::string* newfilename);

  // optional int32 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional string MD5 = 5;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 5;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:filesync.SyncInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_newfilename();
  inline void clear_has_newfilename();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_md5();
  inline void clear_has_md5();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::internal::ArenaStringPtr newfilename_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static SyncInfo* default_instance_;
};
// -------------------------------------------------------------------

class Init : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.Init) */ {
 public:
  Init();
  virtual ~Init();

  Init(const Init& from);

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Init& default_instance();

  void Swap(Init* other);

  // implements Message ----------------------------------------------

  inline Init* New() const { return New(NULL); }

  Init* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Init* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // repeated .filesync.SyncInfo info = 3;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::filesync::SyncInfo& info(int index) const;
  ::filesync::SyncInfo* mutable_info(int index);
  ::filesync::SyncInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::filesync::SyncInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::filesync::SyncInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:filesync.Init)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::RepeatedPtrField< ::filesync::SyncInfo > info_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static Init* default_instance_;
};
// -------------------------------------------------------------------

class SendFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.SendFile) */ {
 public:
  SendFile();
  virtual ~SendFile();

  SendFile(const SendFile& from);

  inline SendFile& operator=(const SendFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFile& default_instance();

  void Swap(SendFile* other);

  // implements Message ----------------------------------------------

  inline SendFile* New() const { return New(NULL); }

  SendFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendFile& from);
  void MergeFrom(const SendFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:filesync.SendFile)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_filename();
  inline void clear_has_filename();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static SendFile* default_instance_;
};
// -------------------------------------------------------------------

class IsControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.IsControl) */ {
 public:
  IsControl();
  virtual ~IsControl();

  IsControl(const IsControl& from);

  inline IsControl& operator=(const IsControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsControl& default_instance();

  void Swap(IsControl* other);

  // implements Message ----------------------------------------------

  inline IsControl* New() const { return New(NULL); }

  IsControl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsControl& from);
  void MergeFrom(const IsControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:filesync.IsControl)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static IsControl* default_instance_;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();

  void Swap(FileInfo* other);

  // implements Message ----------------------------------------------

  inline FileInfo* New() const { return New(NULL); }

  FileInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // required string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:filesync.FileInfo)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_filename();
  inline void clear_has_filename();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static FileInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncInfo

// required int32 id = 1;
inline bool SyncInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SyncInfo::id() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.id)
  return id_;
}
inline void SyncInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.id)
}

// required string filename = 2;
inline bool SyncInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& SyncInfo::filename() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.filename)
}
inline void SyncInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncInfo.filename)
}
inline void SyncInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncInfo.filename)
}
inline ::std::string* SyncInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.SyncInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncInfo::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.SyncInfo.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncInfo.filename)
}

// optional string newFilename = 3;
inline bool SyncInfo::has_newfilename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncInfo::set_has_newfilename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncInfo::clear_has_newfilename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncInfo::clear_newfilename() {
  newfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newfilename();
}
inline const ::std::string& SyncInfo::newfilename() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.newFilename)
  return newfilename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncInfo::set_newfilename(const ::std::string& value) {
  set_has_newfilename();
  newfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.newFilename)
}
inline void SyncInfo::set_newfilename(const char* value) {
  set_has_newfilename();
  newfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncInfo.newFilename)
}
inline void SyncInfo::set_newfilename(const char* value, size_t size) {
  set_has_newfilename();
  newfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncInfo.newFilename)
}
inline ::std::string* SyncInfo::mutable_newfilename() {
  set_has_newfilename();
  // @@protoc_insertion_point(field_mutable:filesync.SyncInfo.newFilename)
  return newfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncInfo::release_newfilename() {
  // @@protoc_insertion_point(field_release:filesync.SyncInfo.newFilename)
  clear_has_newfilename();
  return newfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncInfo::set_allocated_newfilename(::std::string* newfilename) {
  if (newfilename != NULL) {
    set_has_newfilename();
  } else {
    clear_has_newfilename();
  }
  newfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newfilename);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncInfo.newFilename)
}

// optional int32 size = 4;
inline bool SyncInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 SyncInfo::size() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.size)
  return size_;
}
inline void SyncInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.size)
}

// optional string MD5 = 5;
inline bool SyncInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& SyncInfo::md5() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.MD5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.MD5)
}
inline void SyncInfo::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncInfo.MD5)
}
inline void SyncInfo::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncInfo.MD5)
}
inline ::std::string* SyncInfo::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:filesync.SyncInfo.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncInfo::release_md5() {
  // @@protoc_insertion_point(field_release:filesync.SyncInfo.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncInfo::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncInfo.MD5)
}

// -------------------------------------------------------------------

// Init

// required string username = 1;
inline bool Init::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Init::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Init::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Init::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Init::username() const {
  // @@protoc_insertion_point(field_get:filesync.Init.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Init::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.Init.username)
}
inline void Init::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.Init.username)
}
inline void Init::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.Init.username)
}
inline ::std::string* Init::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:filesync.Init.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Init::release_username() {
  // @@protoc_insertion_point(field_release:filesync.Init.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Init::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:filesync.Init.username)
}

// required string password = 2;
inline bool Init::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Init::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Init::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Init::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Init::password() const {
  // @@protoc_insertion_point(field_get:filesync.Init.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Init::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.Init.password)
}
inline void Init::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.Init.password)
}
inline void Init::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.Init.password)
}
inline ::std::string* Init::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:filesync.Init.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Init::release_password() {
  // @@protoc_insertion_point(field_release:filesync.Init.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Init::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:filesync.Init.password)
}

// repeated .filesync.SyncInfo info = 3;
inline int Init::info_size() const {
  return info_.size();
}
inline void Init::clear_info() {
  info_.Clear();
}
inline const ::filesync::SyncInfo& Init::info(int index) const {
  // @@protoc_insertion_point(field_get:filesync.Init.info)
  return info_.Get(index);
}
inline ::filesync::SyncInfo* Init::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:filesync.Init.info)
  return info_.Mutable(index);
}
inline ::filesync::SyncInfo* Init::add_info() {
  // @@protoc_insertion_point(field_add:filesync.Init.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::filesync::SyncInfo >*
Init::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:filesync.Init.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::filesync::SyncInfo >&
Init::info() const {
  // @@protoc_insertion_point(field_list:filesync.Init.info)
  return info_;
}

// -------------------------------------------------------------------

// SendFile

// required int32 id = 1;
inline bool SendFile::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendFile::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendFile::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendFile::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SendFile::id() const {
  // @@protoc_insertion_point(field_get:filesync.SendFile.id)
  return id_;
}
inline void SendFile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.SendFile.id)
}

// required string filename = 2;
inline bool SendFile::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendFile::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& SendFile::filename() const {
  // @@protoc_insertion_point(field_get:filesync.SendFile.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFile::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SendFile.filename)
}
inline void SendFile::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SendFile.filename)
}
inline void SendFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SendFile.filename)
}
inline ::std::string* SendFile::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.SendFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFile::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.SendFile.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.SendFile.filename)
}

// -------------------------------------------------------------------

// IsControl

// required int32 id = 1;
inline bool IsControl::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsControl::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsControl::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsControl::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 IsControl::id() const {
  // @@protoc_insertion_point(field_get:filesync.IsControl.id)
  return id_;
}
inline void IsControl::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.IsControl.id)
}

// -------------------------------------------------------------------

// FileInfo

// required int32 size = 1;
inline bool FileInfo::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileInfo::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:filesync.FileInfo.size)
  return size_;
}
inline void FileInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:filesync.FileInfo.size)
}

// required string filename = 2;
inline bool FileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:filesync.FileInfo.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.FileInfo.filename)
}
inline void FileInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.FileInfo.filename)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.FileInfo.filename)
}
inline ::std::string* FileInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.FileInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.FileInfo.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.FileInfo.filename)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filesync

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_filesync_2eproto__INCLUDED
