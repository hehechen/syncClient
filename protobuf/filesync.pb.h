// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesync.proto

#ifndef PROTOBUF_filesync_2eproto__INCLUDED
#define PROTOBUF_filesync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace filesync {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_filesync_2eproto();
void protobuf_AssignDesc_filesync_2eproto();
void protobuf_ShutdownFile_filesync_2eproto();

class fileInfo;
class sendfile;
class syncInfo;

// ===================================================================

class syncInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.syncInfo) */ {
 public:
  syncInfo();
  virtual ~syncInfo();

  syncInfo(const syncInfo& from);

  inline syncInfo& operator=(const syncInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const syncInfo& default_instance();

  void Swap(syncInfo* other);

  // implements Message ----------------------------------------------

  inline syncInfo* New() const { return New(NULL); }

  syncInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const syncInfo& from);
  void MergeFrom(const syncInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(syncInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional int32 size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional string MD5 = 4;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:filesync.syncInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_md5();
  inline void clear_has_md5();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static syncInfo* default_instance_;
};
// -------------------------------------------------------------------

class sendfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.sendfile) */ {
 public:
  sendfile();
  virtual ~sendfile();

  sendfile(const sendfile& from);

  inline sendfile& operator=(const sendfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sendfile& default_instance();

  void Swap(sendfile* other);

  // implements Message ----------------------------------------------

  inline sendfile* New() const { return New(NULL); }

  sendfile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sendfile& from);
  void MergeFrom(const sendfile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(sendfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:filesync.sendfile)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_filename();
  inline void clear_has_filename();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static sendfile* default_instance_;
};
// -------------------------------------------------------------------

class fileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:filesync.fileInfo) */ {
 public:
  fileInfo();
  virtual ~fileInfo();

  fileInfo(const fileInfo& from);

  inline fileInfo& operator=(const fileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fileInfo& default_instance();

  void Swap(fileInfo* other);

  // implements Message ----------------------------------------------

  inline fileInfo* New() const { return New(NULL); }

  fileInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fileInfo& from);
  void MergeFrom(const fileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // required string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:filesync.fileInfo)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_filename();
  inline void clear_has_filename();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_filesync_2eproto();
  friend void protobuf_AssignDesc_filesync_2eproto();
  friend void protobuf_ShutdownFile_filesync_2eproto();

  void InitAsDefaultInstance();
  static fileInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// syncInfo

// required int32 id = 1;
inline bool syncInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void syncInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void syncInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void syncInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 syncInfo::id() const {
  // @@protoc_insertion_point(field_get:filesync.syncInfo.id)
  return id_;
}
inline void syncInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.syncInfo.id)
}

// required string filename = 2;
inline bool syncInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void syncInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void syncInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void syncInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& syncInfo::filename() const {
  // @@protoc_insertion_point(field_get:filesync.syncInfo.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void syncInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.syncInfo.filename)
}
inline void syncInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.syncInfo.filename)
}
inline void syncInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.syncInfo.filename)
}
inline ::std::string* syncInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.syncInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* syncInfo::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.syncInfo.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void syncInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.syncInfo.filename)
}

// optional int32 size = 3;
inline bool syncInfo::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void syncInfo::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void syncInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void syncInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 syncInfo::size() const {
  // @@protoc_insertion_point(field_get:filesync.syncInfo.size)
  return size_;
}
inline void syncInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:filesync.syncInfo.size)
}

// optional string MD5 = 4;
inline bool syncInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void syncInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void syncInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void syncInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& syncInfo::md5() const {
  // @@protoc_insertion_point(field_get:filesync.syncInfo.MD5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void syncInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.syncInfo.MD5)
}
inline void syncInfo::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.syncInfo.MD5)
}
inline void syncInfo::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.syncInfo.MD5)
}
inline ::std::string* syncInfo::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:filesync.syncInfo.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* syncInfo::release_md5() {
  // @@protoc_insertion_point(field_release:filesync.syncInfo.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void syncInfo::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:filesync.syncInfo.MD5)
}

// -------------------------------------------------------------------

// sendfile

// required int32 id = 1;
inline bool sendfile::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sendfile::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sendfile::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sendfile::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 sendfile::id() const {
  // @@protoc_insertion_point(field_get:filesync.sendfile.id)
  return id_;
}
inline void sendfile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.sendfile.id)
}

// required string filename = 2;
inline bool sendfile::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sendfile::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sendfile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sendfile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& sendfile::filename() const {
  // @@protoc_insertion_point(field_get:filesync.sendfile.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sendfile::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.sendfile.filename)
}
inline void sendfile::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.sendfile.filename)
}
inline void sendfile::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.sendfile.filename)
}
inline ::std::string* sendfile::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.sendfile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sendfile::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.sendfile.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sendfile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.sendfile.filename)
}

// -------------------------------------------------------------------

// fileInfo

// required int32 size = 1;
inline bool fileInfo::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fileInfo::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fileInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fileInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 fileInfo::size() const {
  // @@protoc_insertion_point(field_get:filesync.fileInfo.size)
  return size_;
}
inline void fileInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:filesync.fileInfo.size)
}

// required string filename = 2;
inline bool fileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& fileInfo::filename() const {
  // @@protoc_insertion_point(field_get:filesync.fileInfo.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.fileInfo.filename)
}
inline void fileInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.fileInfo.filename)
}
inline void fileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.fileInfo.filename)
}
inline ::std::string* fileInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.fileInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.fileInfo.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.fileInfo.filename)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filesync

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_filesync_2eproto__INCLUDED
