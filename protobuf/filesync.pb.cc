// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "filesync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace filesync {

namespace {

const ::google::protobuf::Descriptor* SyncInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_filesync_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_filesync_2eproto() {
  protobuf_AddDesc_filesync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "filesync.proto");
  GOOGLE_CHECK(file != NULL);
  SyncInfo_descriptor_ = file->message_type(0);
  static const int SyncInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, newfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, md5_),
  };
  SyncInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncInfo_descriptor_,
      SyncInfo::default_instance_,
      SyncInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SyncInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, _internal_metadata_),
      -1);
  SendFile_descriptor_ = file->message_type(1);
  static const int SendFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFile, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFile, filename_),
  };
  SendFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendFile_descriptor_,
      SendFile::default_instance_,
      SendFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFile, _has_bits_[0]),
      -1,
      -1,
      sizeof(SendFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFile, _internal_metadata_),
      -1);
  IsControl_descriptor_ = file->message_type(2);
  static const int IsControl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsControl, id_),
  };
  IsControl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IsControl_descriptor_,
      IsControl::default_instance_,
      IsControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsControl, _has_bits_[0]),
      -1,
      -1,
      sizeof(IsControl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsControl, _internal_metadata_),
      -1);
  FileInfo_descriptor_ = file->message_type(3);
  static const int FileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filename_),
  };
  FileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileInfo_descriptor_,
      FileInfo::default_instance_,
      FileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(FileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_filesync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncInfo_descriptor_, &SyncInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendFile_descriptor_, &SendFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IsControl_descriptor_, &IsControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileInfo_descriptor_, &FileInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_filesync_2eproto() {
  delete SyncInfo::default_instance_;
  delete SyncInfo_reflection_;
  delete SendFile::default_instance_;
  delete SendFile_reflection_;
  delete IsControl::default_instance_;
  delete IsControl_reflection_;
  delete FileInfo::default_instance_;
  delete FileInfo_reflection_;
}

void protobuf_AddDesc_filesync_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_filesync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016filesync.proto\022\010filesync\"X\n\010SyncInfo\022\n"
    "\n\002id\030\001 \002(\005\022\020\n\010filename\030\002 \002(\t\022\023\n\013newFilen"
    "ame\030\003 \001(\t\022\014\n\004size\030\004 \001(\005\022\013\n\003MD5\030\005 \001(\t\"(\n\010"
    "SendFile\022\n\n\002id\030\001 \002(\005\022\020\n\010filename\030\002 \002(\t\"\027"
    "\n\tIsControl\022\n\n\002id\030\001 \002(\005\"*\n\010FileInfo\022\014\n\004s"
    "ize\030\001 \002(\005\022\020\n\010filename\030\002 \002(\t", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "filesync.proto", &protobuf_RegisterTypes);
  SyncInfo::default_instance_ = new SyncInfo();
  SendFile::default_instance_ = new SendFile();
  IsControl::default_instance_ = new IsControl();
  FileInfo::default_instance_ = new FileInfo();
  SyncInfo::default_instance_->InitAsDefaultInstance();
  SendFile::default_instance_->InitAsDefaultInstance();
  IsControl::default_instance_->InitAsDefaultInstance();
  FileInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_filesync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_filesync_2eproto {
  StaticDescriptorInitializer_filesync_2eproto() {
    protobuf_AddDesc_filesync_2eproto();
  }
} static_descriptor_initializer_filesync_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncInfo::kIdFieldNumber;
const int SyncInfo::kFilenameFieldNumber;
const int SyncInfo::kNewFilenameFieldNumber;
const int SyncInfo::kSizeFieldNumber;
const int SyncInfo::kMD5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncInfo::SyncInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.SyncInfo)
}

void SyncInfo::InitAsDefaultInstance() {
}

SyncInfo::SyncInfo(const SyncInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:filesync.SyncInfo)
}

void SyncInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncInfo::~SyncInfo() {
  // @@protoc_insertion_point(destructor:filesync.SyncInfo)
  SharedDtor();
}

void SyncInfo::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SyncInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncInfo_descriptor_;
}

const SyncInfo& SyncInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filesync_2eproto();
  return *default_instance_;
}

SyncInfo* SyncInfo::default_instance_ = NULL;

SyncInfo* SyncInfo::New(::google::protobuf::Arena* arena) const {
  SyncInfo* n = new SyncInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.SyncInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SyncInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SyncInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, size_);
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_newfilename()) {
      newfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_md5()) {
      md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SyncInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesync.SyncInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filesync.SyncInfo.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newFilename;
        break;
      }

      // optional string newFilename = 3;
      case 3: {
        if (tag == 26) {
         parse_newFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newfilename().data(), this->newfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filesync.SyncInfo.newFilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MD5;
        break;
      }

      // optional string MD5 = 5;
      case 5: {
        if (tag == 42) {
         parse_MD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filesync.SyncInfo.MD5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesync.SyncInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesync.SyncInfo)
  return false;
#undef DO_
}

void SyncInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesync.SyncInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SyncInfo.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string newFilename = 3;
  if (has_newfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newfilename().data(), this->newfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SyncInfo.newFilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->newfilename(), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional string MD5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SyncInfo.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->md5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:filesync.SyncInfo)
}

::google::protobuf::uint8* SyncInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.SyncInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SyncInfo.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string newFilename = 3;
  if (has_newfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newfilename().data(), this->newfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SyncInfo.newFilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newfilename(), target);
  }

  // optional int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional string MD5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SyncInfo.MD5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.SyncInfo)
  return target;
}

int SyncInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:filesync.SyncInfo)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_filename()) {
    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  return total_size;
}
int SyncInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.SyncInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional string newFilename = 3;
    if (has_newfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newfilename());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional string MD5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.SyncInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SyncInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.SyncInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.SyncInfo)
    MergeFrom(*source);
  }
}

void SyncInfo::MergeFrom(const SyncInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.SyncInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_newfilename()) {
      set_has_newfilename();
      newfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newfilename_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SyncInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.SyncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncInfo::CopyFrom(const SyncInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.SyncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SyncInfo::Swap(SyncInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncInfo::InternalSwap(SyncInfo* other) {
  std::swap(id_, other->id_);
  filename_.Swap(&other->filename_);
  newfilename_.Swap(&other->newfilename_);
  std::swap(size_, other->size_);
  md5_.Swap(&other->md5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncInfo_descriptor_;
  metadata.reflection = SyncInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncInfo

// required int32 id = 1;
bool SyncInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 SyncInfo::id() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.id)
  return id_;
}
 void SyncInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.id)
}

// required string filename = 2;
bool SyncInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& SyncInfo::filename() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.filename)
}
 void SyncInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncInfo.filename)
}
 void SyncInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncInfo.filename)
}
 ::std::string* SyncInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.SyncInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SyncInfo::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.SyncInfo.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncInfo.filename)
}

// optional string newFilename = 3;
bool SyncInfo::has_newfilename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncInfo::set_has_newfilename() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncInfo::clear_has_newfilename() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncInfo::clear_newfilename() {
  newfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newfilename();
}
 const ::std::string& SyncInfo::newfilename() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.newFilename)
  return newfilename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncInfo::set_newfilename(const ::std::string& value) {
  set_has_newfilename();
  newfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.newFilename)
}
 void SyncInfo::set_newfilename(const char* value) {
  set_has_newfilename();
  newfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncInfo.newFilename)
}
 void SyncInfo::set_newfilename(const char* value, size_t size) {
  set_has_newfilename();
  newfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncInfo.newFilename)
}
 ::std::string* SyncInfo::mutable_newfilename() {
  set_has_newfilename();
  // @@protoc_insertion_point(field_mutable:filesync.SyncInfo.newFilename)
  return newfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SyncInfo::release_newfilename() {
  // @@protoc_insertion_point(field_release:filesync.SyncInfo.newFilename)
  clear_has_newfilename();
  return newfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncInfo::set_allocated_newfilename(::std::string* newfilename) {
  if (newfilename != NULL) {
    set_has_newfilename();
  } else {
    clear_has_newfilename();
  }
  newfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newfilename);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncInfo.newFilename)
}

// optional int32 size = 4;
bool SyncInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
 ::google::protobuf::int32 SyncInfo::size() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.size)
  return size_;
}
 void SyncInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.size)
}

// optional string MD5 = 5;
bool SyncInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SyncInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
void SyncInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
void SyncInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
 const ::std::string& SyncInfo::md5() const {
  // @@protoc_insertion_point(field_get:filesync.SyncInfo.MD5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SyncInfo.MD5)
}
 void SyncInfo::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncInfo.MD5)
}
 void SyncInfo::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncInfo.MD5)
}
 ::std::string* SyncInfo::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:filesync.SyncInfo.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SyncInfo::release_md5() {
  // @@protoc_insertion_point(field_release:filesync.SyncInfo.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SyncInfo::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncInfo.MD5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendFile::kIdFieldNumber;
const int SendFile::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendFile::SendFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.SendFile)
}

void SendFile::InitAsDefaultInstance() {
}

SendFile::SendFile(const SendFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:filesync.SendFile)
}

void SendFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFile::~SendFile() {
  // @@protoc_insertion_point(destructor:filesync.SendFile)
  SharedDtor();
}

void SendFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFile_descriptor_;
}

const SendFile& SendFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filesync_2eproto();
  return *default_instance_;
}

SendFile* SendFile::default_instance_ = NULL;

SendFile* SendFile::New(::google::protobuf::Arena* arena) const {
  SendFile* n = new SendFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendFile::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.SendFile)
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0;
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SendFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesync.SendFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filesync.SendFile.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesync.SendFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesync.SendFile)
  return false;
#undef DO_
}

void SendFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesync.SendFile)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SendFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:filesync.SendFile)
}

::google::protobuf::uint8* SendFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.SendFile)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.SendFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.SendFile)
  return target;
}

int SendFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:filesync.SendFile)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_filename()) {
    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  return total_size;
}
int SendFile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.SendFile)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.SendFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendFile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.SendFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.SendFile)
    MergeFrom(*source);
  }
}

void SendFile::MergeFrom(const SendFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.SendFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SendFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.SendFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFile::CopyFrom(const SendFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.SendFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendFile::Swap(SendFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendFile::InternalSwap(SendFile* other) {
  std::swap(id_, other->id_);
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFile_descriptor_;
  metadata.reflection = SendFile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendFile

// required int32 id = 1;
bool SendFile::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendFile::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SendFile::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendFile::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 SendFile::id() const {
  // @@protoc_insertion_point(field_get:filesync.SendFile.id)
  return id_;
}
 void SendFile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.SendFile.id)
}

// required string filename = 2;
bool SendFile::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendFile::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void SendFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& SendFile::filename() const {
  // @@protoc_insertion_point(field_get:filesync.SendFile.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendFile::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.SendFile.filename)
}
 void SendFile::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SendFile.filename)
}
 void SendFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SendFile.filename)
}
 ::std::string* SendFile::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.SendFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendFile::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.SendFile.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.SendFile.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsControl::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsControl::IsControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.IsControl)
}

void IsControl::InitAsDefaultInstance() {
}

IsControl::IsControl(const IsControl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:filesync.IsControl)
}

void IsControl::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsControl::~IsControl() {
  // @@protoc_insertion_point(destructor:filesync.IsControl)
  SharedDtor();
}

void IsControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsControl_descriptor_;
}

const IsControl& IsControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filesync_2eproto();
  return *default_instance_;
}

IsControl* IsControl::default_instance_ = NULL;

IsControl* IsControl::New(::google::protobuf::Arena* arena) const {
  IsControl* n = new IsControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsControl::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.IsControl)
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IsControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesync.IsControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesync.IsControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesync.IsControl)
  return false;
#undef DO_
}

void IsControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesync.IsControl)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:filesync.IsControl)
}

::google::protobuf::uint8* IsControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.IsControl)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.IsControl)
  return target;
}

int IsControl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.IsControl)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.IsControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IsControl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IsControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.IsControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.IsControl)
    MergeFrom(*source);
  }
}

void IsControl::MergeFrom(const IsControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.IsControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IsControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.IsControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsControl::CopyFrom(const IsControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.IsControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsControl::Swap(IsControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsControl::InternalSwap(IsControl* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsControl_descriptor_;
  metadata.reflection = IsControl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsControl

// required int32 id = 1;
bool IsControl::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IsControl::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IsControl::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IsControl::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 IsControl::id() const {
  // @@protoc_insertion_point(field_get:filesync.IsControl.id)
  return id_;
}
 void IsControl::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:filesync.IsControl.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kSizeFieldNumber;
const int FileInfo::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.FileInfo)
}

void FileInfo::InitAsDefaultInstance() {
}

FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:filesync.FileInfo)
}

void FileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:filesync.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfo_descriptor_;
}

const FileInfo& FileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filesync_2eproto();
  return *default_instance_;
}

FileInfo* FileInfo::default_instance_ = NULL;

FileInfo* FileInfo::New(::google::protobuf::Arena* arena) const {
  FileInfo* n = new FileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.FileInfo)
  if (_has_bits_[0 / 32] & 3u) {
    size_ = 0;
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesync.FileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filesync.FileInfo.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesync.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesync.FileInfo)
  return false;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesync.FileInfo)
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.FileInfo.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:filesync.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.FileInfo)
  // required int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filesync.FileInfo.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.FileInfo)
  return target;
}

int FileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:filesync.FileInfo)
  int total_size = 0;

  if (has_size()) {
    // required int32 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  if (has_filename()) {
    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  return total_size;
}
int FileInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.FileInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

    // required string filename = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.FileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.FileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  std::swap(size_, other->size_);
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfo_descriptor_;
  metadata.reflection = FileInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileInfo

// required int32 size = 1;
bool FileInfo::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FileInfo::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void FileInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void FileInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
 ::google::protobuf::int32 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:filesync.FileInfo.size)
  return size_;
}
 void FileInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:filesync.FileInfo.size)
}

// required string filename = 2;
bool FileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void FileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:filesync.FileInfo.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesync.FileInfo.filename)
}
 void FileInfo::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.FileInfo.filename)
}
 void FileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.FileInfo.filename)
}
 ::std::string* FileInfo::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:filesync.FileInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.FileInfo.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.FileInfo.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace filesync

// @@protoc_insertion_point(global_scope)
